<!-- /templates/collection.list.liquid -->
{% comment %}

  By using a variation of the 'view all' parameter technique, you can create
  a custom layout for any template by adding ?view=xxxx

  In this example, you can have a list view of your collection page by going to
  /collections/all?view=list

  For more information on collection tags:
    - http://docs.shopify.com/themes/liquid-variables/collection

  For more information on the ?view parameter:
    - http://docs.shopify.com/support/configuration/store-customization/can-i-show-more-than-50-products-on-my-homepage-can-i-add-a-view-all-function-to-my-collection-pages#add-view-all

{% endcomment %}

{% paginate collection.products by 12 %}

{% include 'breadcrumb' %}

{% comment %}
  Use .grid--rev so that the collection tags appear below the products on mobile
{% endcomment %}
<div class="grid">
  
{% include 'collection-sidebar' %}

  <div class="grid__item large--one-whole">

      <header class="section-header">
        <div class="section-header__right">
          {% include 'collection-sorting' %}
        </div>
      </header>

  </div>      

    <div class="grid__item large--one-whole">

    {% comment %}
      Use class grid-uniform to have evenly sized columns clear
      each other properly at each breakpoint.
    {% endcomment %}
    <div class="grid-uniform products-ajax-wrapper">

      <!-- begin product list output -->
      {% for product in collection.products %}

        {% comment %}
          Check if the product is on sale and set a variable to be used below.
        {% endcomment %}
        {% assign on_sale = false %}
        {% if product.compare_at_price > product.price %}
          {% assign on_sale = true %}
        {% endif %}

        {% comment %}
          Check if the product is sold out and set a variable to be used below.
        {% endcomment %}
        {% assign sold_out = true %}
        {% if product.available %}
          {% assign sold_out = false %}
        {% endif %}

        <div class="grid__item grid-list-item product-ajax-wrapper" id="product-{{ forloop.index | plus:paginate.current_offset }}">

          {% comment %}
            Link to your product with the 'within: collection' filter for the link to be aware of the collection.
            This allows you to create collection-based navigation on the product page.

            Results of using 'within: collection':
            - Instead of a URL with /products/product-handle
              you would get /collections/collection-handle/products/product-handle

            For more info on navigation within a collection
              - http://docs.shopify.com/support/your-store/collections/how-to-navigate-within-a-collection
          {% endcomment %}
          <div class="grid large--display-table">
            <div class="grid__item large--one-fifth large--display-table-cell medium--one-third">
              <a href="{{ product.url | within: collection }}">
                <img src="{{ product.featured_image.src | img_url: 'medium' }}" alt="{{ product.featured_image.alt | escape }}" class="grid__image">
              </a>
            </div>
            <div class="grid__item large--four-fifths large--display-table-cell medium--two-thirds grid-list">
              <div class="grid">
                <div class="grid__item large--three-quarters medium--two-thirds">
                  <p class="h6">{{ product.title }}</p>
                  <p class="sku">{{ product.variants.first.sku }}</p>

                    {% include  'product-suitable-makes' %}

                  <div class="rte">
                    {% comment %}                    
                      <p>{{ product.content | strip_html | truncatewords: 30 }}</p>
                    {% endcomment %}
                  </div>
                </div>
                <div class="grid__item large--one-quarter medium--one-third larger-text">
                  {% comment %}
                    You can show a leading 'from' or 'up to' by checking 'product.price_varies'
                    if your variants have different prices.
                  {% endcomment %}
                  {% if on_sale %}
                    {% if product.price_varies %}
                      {% assign sale_price = product.price | money %}
                      {{ 'products.product.on_sale_from_html' | t: price: sale_price }}
                    {% else %}
                      <strong>{{ 'products.product.on_sale' | t }}</strong>
                      {{ product.price | money }}
                    {% endif %}
                  {% else %}
                    {% if product.price_varies %}
                      {% assign price = product.price | money %}
                      {{ 'products.general.from_text_html' | t: price: price }}
                    {% else %}
                      {{ product.price | money }}
                    {% endif %}
                  {% endif %}
                  {% if sold_out %}
                    <br><strong>{{ 'products.product.sold_out' | t }}</strong>
                  {% endif %}
                  {% if on_sale %}
                    <br><span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span><s>{{ product.compare_at_price | money }}</s>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>

      {% else %}

        <div class="grid__item">
          <p>{{ 'collections.general.no_matches' | t }}</p>
        </div>

      {% endfor %}
      <!-- //product list output -->

    </div>

     {% if paginate.next %}
      <hr>
      <div class="more">&darr; <a id="NextPageLinkSelector" href="{{ paginate.next.url }}">&nbsp; &nbsp; Keep Scrolling to Load More</a></div>        
     {% endif %}

  </div>


</div>

{% endpaginate %}

<script>
  /* Product Tag Filters - Good for any number of filters on any type of collection page.
     Give you product tag filter select element a class of coll-filter.
     Give your collection select a class of coll-picker.
     Brought to you by Caroline Schnapp. */
  Shopify.queryParams = {};
  if (location.search.length) {
    for (var aKeyValue, i = 0, aCouples = location.search.substr(1).split('&'); i < aCouples.length; i++) {
      aKeyValue = aCouples[i].split('=');
      if (aKeyValue.length > 1) {
        Shopify.queryParams[decodeURIComponent(aKeyValue[0])] = decodeURIComponent(aKeyValue[1]);
      }
    }
  }
  jQuery('.coll-picker').change(function() {
    if (jQuery(this).val()) {
      location.href = '/collections/' + jQuery(this).val();
    }
    else {
      location.href = '/collections/all';
    }
  });
  jQuery(document).ready(function() {
     console.log('window loaded');
    if (jQuery('#make-filter').val()){
      console.log('has value');
      $('#model-filter').fadeIn(200);
    } else {
      console.log('does not have value');
      $('#model-filter').fadeOut(200);
    }
  });    
  var collFilters = jQuery('.coll-filter');
  collFilters.change(function() {
    delete Shopify.queryParams.page;
    var newTags = [];
    collFilters.each(function() {
      if (jQuery(this).val()) {
        newTags.push(jQuery(this).val());
      }
    });
    {% if collection.handle %}
    var newURL = '/collections/{{ collection.handle }}';
    if (newTags.length) {
      newURL += '/' + newTags.join('+');
    }
    var search = jQuery.param(Shopify.queryParams);
    if (search.length) {
      newURL += '?' + search;
    }
    location.href = newURL;
    {% else %}
    if (newTags.length) {
      Shopify.queryParams.constraint = newTags.join('+');
    }
    else {
      delete Shopify.queryParams.constraint;
    }
    location.search = jQuery.param(Shopify.queryParams);
    {% endif %}
  });
</script>
